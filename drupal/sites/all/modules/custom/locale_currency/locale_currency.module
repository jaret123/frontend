<?php

/**
 * @file
 * Locale Currency module
 * Allows admins to define a currency code for each of their locales.
 *
 * @author Tom Kirkpatrick (mrfelton), www.systemseed.com
 */

/**
 * Implements hook_form_alter().
 */
function locale_currency_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'locale_languages_edit_form') || ($form_id == 'locale_languages_custom_form')) {
    $languages = language_list();
    $fields = array();
    $fields['currency'] = array(
      '#type' => 'textfield',
      '#title' => t('Currency Code',array(),array("context"=>"Locale Currency Module")),
      '#maxlength' => 3,
      '#size' => 12,
      '#default_value' => isset($languages[$form['langcode']['#value']]->currency) ? $languages[$form['langcode']['#value']]->currency : 'USD',
      '#description' => t('<a href="@link">ISO 4217</a> compliant currency identifier. Examples: "GBP", "EUR", and "USD".', array('@link' => 'http://www.oanda.com/site/help/iso_code.shtml'),array("context"=>"Locale Currency Module")),
    );
    
    $mass = array(
      'ounces' => t('ounces',array(),array("context"=>"Locale Currency Module")),
      'grams' => t('grams',array(),array("context"=>"Locale Currency Module"))
    );
    $fields['mass'] = array(
      '#type' => 'radios',
      '#title' => t('Mass',array(),array("context"=>"Locale Currency Module")),
      '#default_value' => isset($languages[$form['langcode']['#value']]->mass) ? $languages[$form['langcode']['#value']]->mass : 'ounces',
      '#options' => $mass,
      '#description' => t('Unit of Mass (ounces or grams)',array(),array("context"=>"Locale Currency Module")),
    );

    $volume = array(
      'gallons' => t('gallons',array(),array("context"=>"Locale Currency Module")),
      'ounces' => t('liters',array(),array("context"=>"Locale Currency Module"))
    );
    $fields['volume'] = array(
      '#type' => 'radios',
      '#title' => t('Volume'),
      '#default_value' => isset($languages[$form['langcode']['#value']]->volume) ? $languages[$form['langcode']['#value']]->volume : 'gallons',
      '#options' => $volume,
      '#description' => t('Unit of Volume (gallons or liters)',array(),array("context"=>"Locale Currency Module")),
    );

    $temperature = array(
      'F' => t('Fahrenheit',array(),array("context"=>"Locale Currency Module")),
      'C' => t('Celsius',array(),array("context"=>"Locale Currency Module"))
    );
    $fields['temperature'] = array(
      '#type' => 'radios',
      '#title' => t('temperature',array(),array("context"=>"Locale Currency Module")),
      '#default_value' => isset($languages[$form['langcode']['#value']]->temperature) ? $languages[$form['langcode']['#value']]->temperature : 'F',
      '#options' => $temperature,
      '#description' => t('Unit of temperature (Fahrenheit or Celsius)',array(),array("context"=>"Locale Currency Module")),
    );

    $fields['energy'] = array(
      '#type' => 'radios',
      '#title' => t('energy',array(),array("context"=>"Locale Currency Module")),
      '#default_value' => isset($languages[$form['langcode']['#value']]->energy) ? $languages[$form['langcode']['#value']]->energy : 'therms',
      '#options' => array(
        'therms' => t('Therms'),
        'kwh' => t('Kilo Watt Hours')
      ),
      '#description' => t('Unit of energy (Therms or kwh)',array(),array("context"=>"Locale Currency Module")),
    );

    $form['#submit'][] = 'locale_currency_edit_submit';
    $form['submit']['#weight'] = 10;
    
    switch ($form_id) {
      case 'locale_languages_edit_form':
        $form['currency'] = $fields['currency'];
        $form['mass'] = $fields['mass'];
        $form['volume'] = $fields['volume'];
        $form['temperature'] = $fields['temperature'];
        $form['energy'] = $fields['energy'];

        break;

      case 'locale_languages_custom_form':
        $form['custom language']['currency'] = $fields['currency'];
        $form['custom language']['mass'] = $fields['mass'];
        $form['custom language']['volume'] = $fields['volume'];
        $form['custom language']['temperature'] = $fields['temperature'];
        $form['custom language']['energy'] = $fields['energy'];

        break;
    }
  }
}

/**
 * Custom submit handler for the locale language form.
 */
function locale_currency_edit_submit($form, &$form_state) {
//  dsm($form_state);
  db_update('languages')
  ->fields(array(
    'currency' => $form_state['values']['currency'],
    'mass' => $form_state['values']['mass'],
    'volume' => $form_state['values']['volume'],
    'temperature' => $form_state['values']['temperature'],
    'energy' => $form_state['values']['energy'],
  ))
  ->condition('language', $form_state['values']['langcode'])
  ->execute();
  $language_default = language_default();
  if ($language_default->language == $form_state['values']['langcode']) {
    $language_default->currency = $form_state['values']['currency'];
    $language_default->mass = $form_state['values']['mass'];
    $language_default->volume = $form_state['values']['volume'];
    $language_default->temperature = $form_state['values']['temperature'];
    $language_default->energy = $form_state['values']['energy'];

    variable_set('language_default', $language_default);
  }
}

/**
 * API function to get the currency code associated with a specific locale.
 *
 * @param $lang
 *   Language code whose associated currency to look up.
 *
 * @return
 *   Currency associated with requested language, or NULL if there was none.
 */
function locale_currency_get_currency($lang) {
  $languages = language_list('enabled');
  $language = $languages[1][$lang];
  if (isset($language)) {
    return $language->currency;
  }
  return NULL;
}


/**
 * API function to get the currency code associated with current language.
 *
 * @return
 *   Currency code associated with the current language.
 */
function locale_currency_get_current_currency() {
  global $language;
  return $language->currency;
}

/**
 * API function to get the currency code associated with current language.
 *
 * @return
 *   Currency code associated with the current language.
 */
function locale_currency_get_current_mass() {
  global $language;
  return $language->mass;
}

/**
 * API function to get the currency code associated with current language.
 *
 * @return
 *   Currency code associated with the current language.
 */
function locale_currency_get_current_volume() {
  global $language;
  return $language->volume;
}

/**
 * API function to get the currency code associated with current language.
 *
 * @return
 *   Currency code associated with the current language.
 */
function locale_currency_get_current_temperature() {
  global $language;
  return $language->temperature;
}

function locale_currency_get_current_energy() {
  global $language;
  return $language->energy;
}